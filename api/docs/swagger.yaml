basePath: /api
definitions:
  Models.CommentPagination:
    properties:
      comment_body:
        type: string
      comment_uploader_id:
        type: string
      comment_uploader_profile:
        type: string
      created_at:
        type: string
    type: object
  Models.CommentResponse:
    properties:
      code:
        type: integer
      comments:
        items:
          $ref: '#/definitions/Models.CommentPagination'
        type: array
      count:
        type: integer
      limit:
        type: integer
      next_url:
        type: string
      offset:
        type: integer
    type: object
  Models.Genre:
    properties:
      cnt:
        type: integer
      trackGenre:
        type: string
    type: object
  Models.GenresResponse:
    properties:
      code:
        type: integer
      genres:
        items:
          $ref: '#/definitions/Models.Genre'
        type: array
    type: object
  Models.Track:
    properties:
      trackArtwork:
        type: string
      trackArtworkThumbnail:
        type: string
      trackDescription:
        type: string
      trackDuration:
        type: integer
      trackGenre:
        type: string
      trackHls:
        type: string
      trackId:
        type: string
      trackLikesCount:
        type: integer
      trackPermalink:
        type: string
      trackPlaybackCount:
        type: integer
      trackTitle:
        type: string
      trackUserId:
        type: string
      trackUserName:
        type: string
      trackUserProfile:
        type: string
      trackUserProfileThumbnail:
        type: string
      trackUserSid:
        type: string
    type: object
  Models.TrackResponse:
    properties:
      code:
        type: integer
      track:
        $ref: '#/definitions/Models.Track'
        type: object
    type: object
  Models.TracksResponse:
    properties:
      code:
        type: integer
      tracks:
        items:
          $ref: '#/definitions/Models.Track'
        type: array
    type: object
  Models.User:
    properties:
      userBanner:
        type: string
      userCity:
        type: string
      userCountry:
        type: string
      userDescription:
        type: string
      userFullName:
        type: string
      userId:
        type: string
      userName:
        type: string
      userProfileOrg:
        type: string
      userProfileThumbnail:
        type: string
      userSid:
        type: integer
      userType:
        type: integer
    type: object
  Models.UserResponse:
    properties:
      code:
        type: integer
      user:
        $ref: '#/definitions/Models.User'
        type: object
    type: object
info:
  contact:
    email: hjkim2246@gmail.com
    name: API 개발자 - 김형준
  description: Groove 프로젝트 API swagger 문서입니다.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Groove API Swagger
  version: "1.0"
paths:
  /:
    get:
      description: healthcheck
      responses:
        "200": {}
      tags:
      - healthcheck
  /comments/:trackId:
    get:
      description: 특정 트랙의 댓글을 페이징 처리해서 읽어옴
      parameters:
      - description: 한번에 몇개의 댓글을 읽어올 것인가(페이지 크기)
        in: path
        name: limit
        required: true
        type: string
      - description: 몇 번 댓글부터 시작할 것인가(페이지 번호)
        in: path
        name: offset
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Models.CommentResponse'
      tags:
      - comments
  /tags/:
    get:
      description: 전체 태그들을 속한 트랙 수가 많은 순으로 읽어옴
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Models.GenresResponse'
      tags:
      - tags
  /tracks/genre/:query:
    get:
      description: 특정 장르의 트랙을 모두 읽어옴
      parameters:
      - description: genre
        in: path
        name: query
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Models.TracksResponse'
      tags:
      - tracks
  /tracks/genres:
    get:
      description: 전체 장르들을 속한 트랙 수가 많은 순으로 읽어옴
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Models.GenresResponse'
      tags:
      - tracks
  /tracks/hottest:
    get:
      description: 가장 좋아요 수가 많은 트랙 상위 10개를 읽어
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Models.TracksResponse'
      tags:
      - tracks
  /tracks/id/:trackId:
    get:
      description: track_id 값을 url에 전달하여 해당 트랙의 정보를 읽어옴
      parameters:
      - description: track_id
        in: path
        name: track_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Models.TrackResponse'
      tags:
      - tracks
  /tracks/increase:
    put:
      description: 특정 트랙의 플레이 수, 좋아요 수 등을 1씩 증가시킴
      parameters:
      - description: track_id
        in: query
        name: track_id
        required: true
        type: string
      - description: playback or likes
        in: query
        name: field
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Models.TrackResponse'
      tags:
      - tracks
  /tracks/newest:
    get:
      description: 가장 최근에 업로드 된 트랙 10개를 읽어옴
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Models.TracksResponse'
      tags:
      - tracks
  /tracks/tag/:query:
    get:
      description: 특정 태그의 트랙을 모두 읽어옴
      parameters:
      - description: tag
        in: path
        name: query
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Models.TracksResponse'
      tags:
      - tracks
  /tracks/user/:userId:
    get:
      description: 특정 유저가 업로드한 트랙을 페이징 처리해서 읽어옴
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      - description: 1|2|3, 어떤 기준으로 트랙을 읽어올 것인가, 기본값 1
        in: query
        name: option
        type: integer
      - description: 10개 단위로 페이징 처리, 몇 번째 페이지를 읽어올 것인가, 기본값 0
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Models.TrackResponse'
      tags:
      - tracks
  /users/:userId:
    get:
      description: userid 값에 해당하는 유저 정보를 읽어옴
      parameters:
      - description: userId
        in: path
        name: userId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Models.UserResponse'
      tags:
      - users
swagger: "2.0"
